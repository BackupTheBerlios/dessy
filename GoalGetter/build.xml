<?xml version="1.0"?>
<!--
   $Id: build.xml,v 1.7 2004/10/05 13:25:47 moleman Exp $

   This is a build file for use with the Jakarta Ant build tool, see
   http://jakarta.apache.org/ant/index.html

   To build, go to the directory where this file is located and run
     ant <target>
   with one of the following targets:
   
     clean               removes temporary files and directories
     compile             compiles the sources
     javadoc             creates the JavaDocs
     jar                 creates the application jar
     package-source      builds the source distribution tree: docs, sources, jar
     package-source-zip  builds a zipped source distribution
     package-binary      builds the binary distribution tree: jar, text files
     package-binary-zip  builds a zipped binary distribution
     
-->

<project name="GoalGetter" default="jar" basedir=".">

	<!-- ***************************************************************** -->
	<!-- Give users a chance to override build properties.                 -->
	<!-- ***************************************************************** -->
	<property file="${user.home}/goalgetter.build.properties" />
	<property file="${user.home}/build.properties" />
	<property file="${basedir}/build.properties" />
	<property file="${basedir}/default.properties" />


	<!-- ***************************************************************** -->
	<!-- P A T H S                                                         -->
	<!-- ***************************************************************** -->
	<path id="classpath.libs">
		<pathelement location="${lib.binding.jar}" />
		<pathelement location="${lib.forms.jar}" />
		<pathelement location="${lib.looks.jar}" />
		<pathelement location="${lib.uif.jar}" />
		<pathelement location="${lib.uif-extras.jar}" />
		<pathelement location="${lib.validation.jar}" />
		<!-- 	<pathelement location="${lib.gnujaxp.jar}" /> -->
		<pathelement location="${lib.jcommon.jar}" />
		<pathelement location="${lib.jfreechart.jar}" />
		<!--    	<pathelement location="${lib.servlet.jar}" /> -->
	</path>

	<path id="classpath.main">
		<pathelement location="${lib.binding.jar}" />
		<pathelement location="${lib.forms.jar}" />
		<pathelement location="${lib.looks.jar}" />
		<pathelement location="${lib.uif.jar}" />
		<pathelement location="${lib.uif-extras.jar}" />
		<pathelement location="${lib.validation.jar}" />
		<!--    	<pathelement location="${lib.gnujaxp.jar}" />  -->
		<pathelement location="${lib.jcommon.jar}" />
		<pathelement location="${lib.jfreechart.jar}" />
		<!--	<pathelement location="${lib.servlet.jar}" /> -->
	</path>


	<!-- ***************************************************************** -->
	<!-- C L E A N                                                         -->
	<!-- ***************************************************************** -->
	<target name="clean"
	        description="Removes all temporary files and directories.">

		<delete dir="${build.dir}" />
		<delete dir="${dist.source.dir}" />
		<delete dir="${dist.binary.dir}" />
		<delete dir="${dist.jnlp.dir}" />
	</target>


	<!-- ***************************************************************** -->
	<!-- P R E P A R A T I O N                                             -->
	<!-- ***************************************************************** -->
	<target name="prepare"
	        description="Prepares the build and distribution targets.">

		<tstamp>
			<format property="DATE" pattern="yyyy-MM-dd hh:mm:ss" />
		</tstamp>

		<mkdir dir="${build.main.dir}" />

	</target>


	<!-- ***************************************************************** -->
	<!-- C O M P I L A T I O N                                             -->
	<!-- ***************************************************************** -->
	<target name="compile"
	        depends="compile-main"
	        description="Compiles the main sources." />

	<!-- ***************************************************************** -->
	<target name="compile-main"
	        depends="prepare"
	        description="Compiles the main sources.">
		<javac srcdir="${src.main.dir}"
		       destdir="${build.main.dir}"
		       encoding="${build.encoding}"
		       executable="${build.compile.executable}"
		       fork="${build.compile.fork}"
		       debug="${build.compile.debug}"
		       depend="${build.compile.depend}"
		       deprecation="${build.compile.deprecation}"
		       nowarn="${build.compile.nowarn}"
		       optimize="${build.compile.optimize}"
		       target="${build.compile.target}"
		       verbose="${build.compile.verbose}"
		       bootclasspath="${build.boot.classpath}"
		       classpathref="classpath.main" />
	</target>


	<!-- ***************************************************************** -->
	<!-- J A V A D O C                                                     -->
	<!-- ***************************************************************** -->
	<target name="javadoc"
	        depends="prepare"
	        description="Creates the JavaDocs.">
		<mkdir dir="${build.javadocs.dir}" />
		<javadoc sourcepath="${src.main.dir}"
		         packagenames="${javadoc.packages}"
		         destdir="${build.javadocs.dir}"
		         encoding="${build.encoding}"
		         access="protected"
		         author="true"
		         version="true"
		         use="true"
		         link="${javadoc.link}"
		         windowtitle="${Name} ${impl.version}"
		         doctitle="${Name} ${impl.version}"
		         bottom="${copyright.message}">
			<classpath refid="classpath.libs" />
		</javadoc>
	</target>


	<!-- ***************************************************************** -->
	<!-- J A R                                       				       -->
	<!-- ***************************************************************** -->
	<target name="jar"
	        depends="compile"
	        description="Creates the raw application jar.">
		<manifest file="${build.manifest}">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="${main.class}" />

			<attribute name="Implementation-Title" value="${Name}" />
			<attribute name="Implementation-Version"
			           value="${impl.version} ${DATE}" />
			<attribute name="Implementation-Vendor" value="${vendor}" />
		</manifest>
		<jar destfile="${build.main.jar}" manifest="${build.manifest}">

			<fileset dir="${build.main.dir}" />
			<fileset dir="${src.resources.dir}" />
			<zipfileset src="${lib.binding.jar}" />
			<zipfileset src="${lib.forms.jar}" />
			<zipfileset src="${lib.looks.jar}" />
			<zipfileset src="${lib.uif.jar}" />
			<zipfileset src="${lib.uif-extras.jar}" />
			<zipfileset src="${lib.validation.jar}" />
			<zipfileset src="${lib.jcommon.jar}" />
			<zipfileset src="${lib.jfreechart.jar}" />
		</jar>
	</target>

	<!-- ***************************************************************** -->



	<!-- ***************************************************************** -->
	<!-- P A C K A G E                                                     -->
	<!-- ***************************************************************** -->
	<!-- <target name="package-all" 
			depends="package-source-zip, package-binary-zip,package-jnlp"
	        description="Creates all packages." >
	</target> -->

	<target name="package-all"
	        depends="package-source-zip, package-binary-zip"
	        description="Creates all packages.">
	</target>

	<!-- ***************************************************************** -->
	<target name="package-source"
	        depends="clean, javadoc"
	        description="Creates the source distribution directory tree.">

		<mkdir dir="${dist.source.dir}" />

		<!-- Compile the documentation. -->
		<copy todir="${dist.source.docs.dir}">
			<fileset dir="${docs.dir}" excludes="*.sxw, *.pdf" />
		</copy>
		<move todir="${dist.source.docs.dir}">
			<fileset dir="${build.docs.dir}" />
		</move>

		<!-- Copy the source directories. -->
		<copy todir="${dist.source.src.dir}">
			<fileset dir="${src.dir}" excludes="unused/**/*" />
		</copy>

		<!-- Copy the libraries. -->
		<copy todir="${dist.source.lib.dir}">
			<fileset dir="${lib.dir}" />
		</copy>

		<!-- Copy the distribution files. -->
		<copy todir="${dist.source.dir}">
			<fileset dir="${top.dir}"
			         includes="RELEASE-NOTES.txt, LICENSE-src.txt, build.xml, default.properties" />
		</copy>

		<copy toFile="${dist.source.dir}/README.html"
		      file="${top.dir}/README-src.html" />

		<!-- Copy the jar file. -->
	<!-- don't want this here. just bloats the zipfile.
		<copy toFile="${dist.source.main.jar}" file="${build.main.jar}" />
		
		-->

	</target>

	<!-- ***************************************************************** -->
	<target name="package-source-zip"
	        depends="package-source"
	        description="Packages the source distribution as a zip file.">

		<zip destfile="${dist.source.zip}"
		     basedir="${dist.root.dir}"
		     includes="${dist.source.subdir}/**/*" />
	</target>

	<!-- ***************************************************************** -->
	<target name="package-binary"
	        depends="package-source,jar"
	        description="Creates the binary distribution directory tree.">

		<mkdir dir="${dist.binary.dir}" />

		<!-- Copy the distribution files. -->
		<copy toDir="${dist.binary.dir}">
			<fileset dir="${top.dir}"
			         includes="LICENSE.txt, README.txt, RELEASE-NOTES.txt" />
		</copy>

		<!-- Copy the jar file. -->
		<copy tofile="${dist.binary.main.jar}" file="${build.main.jar}" />

	</target>

	<!-- ***************************************************************** -->
	<target name="package-binary-zip"
	        depends="package-binary"
	        description="Creates the general binary distribution.">
		<zip destfile="${dist.binary.zip}"
		     basedir="${dist.root.dir}"
		     includes="${dist.binary.subdir}/" />
	</target>


	<!-- ***************************************************************** -->
	<!--	<target name="package-jnlp" depends="package-binary"
	        description="Creates the jnlp distribution directory tree." >
	
		<mkdir dir="${dist.jnlp.dir}" />
		
		<copy toDir="${dist.jnlp.dir}" >
			<fileset dir="${top.dir}/conf/jnlp" />
		</copy>

		<copy tofile="${dist.jnlp.main.jar}" 
			  file="${build.main.jar}" />
		
	</target> -->


</project>